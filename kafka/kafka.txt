1、群集kafka安装配置   http://blog.csdn.net/desilting/article/details/22872839
	（1）、配置server.properties
		>broker.id
		>host.name 
		>zookeeper.connect


2、kafka伪分布式安装  http://blog.csdn.net/jameshadoop/article/details/49664767

3、kafka安装配置 http://blog.csdn.net/desilting/article/details/22872839

	（1）、broker.id
	（2）、host.name
	（3）、zookeeper.connect=ml:2181,ml:2182,ml:2183
	（4）、启动zookeeper   ./bin/zkService.sh start
	（5）、./bin/kafka-server-start.sh config/server.properties
	（6）、创建topic    ./bin/kafka-topic.sh --create --zookeeper ml:2181.ml:2182,ml:2183 --replication-factor 3 --partitions 1 --topic mykafka
	（7）、显示topic ./bin/kafka-topic.sh --list --zookeeper ml:2181,ml:2182,ml:2183
	（8）、打开生产者   ./bin/kafka-console-producer.sh --broker-list ml:9092,ml:9093,ml:9094 --topic mykafka
	（9）、打开消费者  ./bin/kafka-console-consumer.sh --zookeeper ml:2181,ml:2182,ml:2183 --topic mykafka --from-beginning



4、kafka配置说明   https://www.cnblogs.com/liangyours/p/4971656.html


	>>broker.id = 0;每一个broker在集群中的唯一表示，要求是正数。当该服务器的IP地址发生变化时，broker.id没有变化，则不会影响consumer的消息情况
	>>log.dirs=/data/kafka-logs; kafka数据的存放地址，多个地址的话用逗号分隔/data/kafka-logs-1,/data/kafka-logs-2
	>>port = 9092 ; broker server的服务器端口
	>>message.max.bytes=6525000;表示消息体最大大小，单位是字节
	>>num.network.threads=4;broker处理消息最大线程数，一般情况下不需要去修改
	>>num.io.threads;broker处理磁盘IO的线程数，数值应该大于你的硬盘数
	>>background.threads=4;一些后台任务处理的线程数，例如过期消息文件的删除等，一般情况下不需要修改
	>>queued.max.requests=500;等待IO线程处理的请求队列最大数，若是等待IO的请求超过这个数值，那么会停止接受外部消息，应该是一种自我保护机制。
	>>host.name;broker的主机地址，若是设置了，那么会绑定到这个地址上，若是没有，会绑定到所有的接口上，并将其中之一发送到ZK，一般不会设置
	>>socket.send.buffer.bytes=100*1024; socket的发送缓冲区，socket的调优参数SO_SNDBUFF
	>>socket.receive.buffer.bytes=100*1024; socket的接受缓冲区，socket的调优参数SO_RCVBUFF
	>>socket.request.max.bytes=100*1024*1024; socket请求的最大数值，防止serverOOM,message.max.bytes必然要小于socket.max.bytes,会被topic创建时的指定参数覆盖
	>>log.segment.bytes=1024*1024*1024; topic的分区是以一堆segment文件存储的，这个控制每个segment的大小，会被topic创建时的制定参数覆盖
	>>log.roll.hours=24*7; 这个参数会在日志segment没有达到log.segment.bytes设置的大小，会强制新建一个segment会被topic创建时的指定参数覆盖
	>>log.cleanup.policy=delete; 日志清理策略选择有，delete和compact主要针对过去数据的处理，或是日志文件达到限制的额度，会被topic创建时的制定参数覆盖
	>>log.retention.minutes=3days;数据存储的最大时间超过这个时间会根据log.cleanup.policy设置的策略去处理数据，也就是消费端能够多久去消费数据。log.retention.lbytes和log.retention.minutes任意一个达到要求，都会执行删除，会被topic创建时的制定参数覆盖
	>>log.retention.bytes=-1;topic每个分区的最大文件大小，一个topic的大小限制=分区数*log.retention.bytes。-1没有大小限制log.retention.bytes和log.retention.minutes任意一个达到要求，都会执行，会被topic创建时的指定参数覆盖
	>>log.retention.check.interval.ms=5minutes;文件大小检查的周期时间，是否处罚log.cleanup.policy中设置的策略
	>>log.cleaner.enable=false;是否开启日志压缩
	>>log.cleaner.threads=2;日志压缩运行的线程数
	>>log.cleaner.io.max.bytes.per.second=None;日志压缩时候处理的最大大小
	>>log.cleaner.dehupe.buffer.size=500*1024*1024;日志压缩去重时候的缓存空间，在空间允许的情况下，越大越好
	>>log.cleaner.io.buffer.load.factor=0.9;日志清理中hash表的扩大因子一般不需要修改
	>>log.cleaner.backoff.ms=15000;检查是否触发日志清理间隔
	>>log.cleaner.min.cleanable.ratio=0.5;日志清理的频率控制，越大意味着更高效的清理，同时会存在一些空间的浪费，会被topic创建时制定参数覆盖
	>>log.cleaner.delete.retention.ms=1day;对于压缩的日志保的最长时间。也是客户端消息的最长时间，同时log.retention.minutes的区别在于一个控制未压缩数据，一个控制压缩后的数据，会被topic创建时制定参数覆盖
	>>log.index.size.max.bytes=10*1024*1024;对于segment日志的索引文件大小限制，会被topic创建时指定参数覆盖
	>>log.index.interval.bytes=4096;当执行一个fetch操作后，需要一定的空间来扫描最近的offset大小，设置越大，代表扫描速度越快，但是也更好内存，一般情况下不需要搭理这个参数
	>>log.flush.interval.message=None;log文件“sync”到磁盘之前积累的消息条数，因为磁盘IO操作是一个慢操作，但又是一个“数据可靠性”的必要手段，所以此参数的设置，需要在“数据可靠性”与“性能”之间做必要的权衡；如果此值过大，将会导致每次“fsync”的时间较长（IO阻塞），如果此值过小，将会导致“fsync”的次数较多，这也意味着整体的client请求有一定的延迟，物理server故障，将会导致没有fsync的消息丢失
	>>log.flush.scheduler.interval.ms=3000;检查是否需要固化到硬盘的时间间隔
	>>log.flush.interval.ms=None;仅仅通过interval来控制消息的磁盘写入时机，是不足的。次参数用于控制"fsync"的时间间隔，如果如果消息量始终没有达到阈值，但是离上一次磁盘同步的时间间隔达到阈值，也将触发
	>>log.delete.delay.ms=60000;文件在索引中清除后保留的时间一般不需要去修改
	>>log.flush.offset.checkpoint.interval.ms=60000;控制上次固化硬盘的时间点，以便于数据恢复一般不需要去修改
	>>auto.create.topic.enable=true;是否允许自动创建topic，若是false，就需要通过命令创建topic
	>>default.replication.factor=1;是否允许自动创建topic若是false，就需要通过命令创建topic
	>>num.partitions=1；每个topic的分区个数，若是在topic创建时候没有指定的话会被topic创建时的指定参数覆盖

5、kafka常用命令  https://www.cnblogs.com/zzt-lovelinlin/p/6228773.html

	（1）、查看topic
		./kafka-topics.sh --list --zookeeper ml:2181,ml:2182,ml:2183
	（2）、查看topic详细信息
		./kafka-topics.sh --zookeeper ml:2181 --describe --topic mlkafka
	（3）、为topic增加副本
		./kafka-ressign-partitions.sh --zookeeper ml:2181 --reassignment-json-file json/partitions-to-move.json --execute
	（4）、创建topic
		./kafka-topics.sh --create --zookeeper ml:2181 --replication-factor 1 --partitions 1 --topic testKJ1
	（5）、为topic增加partition
		./kafka-topics.sh --zookeeper ml:2181 --alter --partitions 20 --topic testKJ1
	（6）、kafka生产者客户端命令
		./kafka-console-producer.sh --broker-list ml:9092 --topic testKJ1
	（7）、kafka消费者客户端命令
		./kafka-console-consumer.sh --zookeeper ml:2181 -from-beginning --topic testKJ1
	（8）、kafka服务启动
		./kafka-server-start.sh -daemon ../config/server.properties
	（9）、下线broker
		./kafka-run-class.sh kafka.admin.ShutdownBroker --zookeeper ml:2181 --broker #brokerId# --num.retries 3 --retry.interval.ms 60 shutdown broker
	（10）、删除topic
		./kafka-run-class.sh kafka.admin.DeleteTopicCommand --topic testKJ1 --zookeeper ml:2181
		./kafka-topics.sh --zookeeper ml:2181 --delete testKJ1
	（11）、查看consumer组内消费的offset
		./kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --zookeeper ml:2181 --group test --topic testKJ1
		./kafka-consumer-offset-checker.sh --zookeeper ml:2181 --group group1 --topic group1
